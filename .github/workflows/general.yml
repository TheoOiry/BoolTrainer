name: Rust

on: [push, pull_request]

env:
  CARGO_TERM_COLOR: always
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
  DOCKER_REPO: ${{ secrets.DOCKERHUB_USERNAME }}/bool_trainer_api
jobs:
  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
          components: rustfmt
      - name: fmt
        working-directory: ./bt_api
        run: |
          cargo fmt --all -- --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          components: clippy
          override: true

      - name: Run clippy
        working-directory: ./bt_api
        run: |
          cargo clippy
  api_test:
    name: Test API
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:12
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 18432:5432
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Cache dependencies
        id: cache-dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true
      - name: Migrate database
        working-directory: ./bt_api
        run: |
          cargo install diesel_cli
          diesel migration run
      - name: Run cargo test
        working-directory: ./bt_api
        run: |
          cargo test

  build_and_push_api:
    name: Build and push API
    needs: [api_test]
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      -
        name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Build and push front
        uses: docker/build-push-action@v2
        with:
          context: ./bt_api
          file: ./bt_api/Dockerfile
          push: true
          tags: nvenard/bool_trainer_api:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
      -
        name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
  test_front:
    name: Test front
    defaults:
      run:
        working-directory: ./bt_front
    needs: [build_and_push_api]
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:12
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 18432:5432
      api:
        image: nvenard/bool_trainer_api
        env:
          RUST_BACKTRACE: 1
          RUST_LOG: critical
          ROCKET_ADDRESS: 0.0.0.0
          ROCKET_PORT: 8080
          DATABASE_URL: postgres://postgres:postgres@postgres:5432/postgres
          JWT_SECRET: 3nEU6FVYvVi
        ports:
          - 8080:8080
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Cypress run
        uses: cypress-io/github-action@v2
        with:
          build: npm run build -- --mode development
          start: npm run serve -- --mode development --port 3000
          browser: chrome
          working-directory: ./bt_front
  build_and_push_front:
    name: Build and push Front
    needs: [test_front]
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache-front
          key: ${{ runner.os }}-buildx-front-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-front-
      -
        name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Build and push front
        uses: docker/build-push-action@v2
        with:
          context: ./bt_front
          file: ./bt_front/Dockerfile
          push: true
          tags: nvenard/bool_trainer_front:latest
          cache-from: type=local,src=/tmp/.buildx-cache-front
          cache-to: type=local,dest=/tmp/.buildx-cache-front-new
      -
        name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache-front
          mv /tmp/.buildx-cache-front-new /tmp/.buildx-cache-front
  deploy:
    runs-on: self-hosted
    name: Deployment
    needs: [build_and_push_front]
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v2

      - name: Remove containers
        continue-on-error: true
        run: |
          sudo docker container rm -f bt_api bt_front bt_db

      - name: Pull new images
        run: |
          sudo docker pull nvenard/bool_trainer_front:latest
          sudo docker pull nvenard/bool_trainer_api:latest
      - name: Run db
        run: |
          sudo docker container run --name bt_db -d \
            -e POSTGRES_PASSWORD=postgres \
            -e POSTGRES_USER=postgres \
            -e POSTGRES_DB=postgres \
            --network bt_network \
            postgres
      - name: Run api
        run: |
          sudo docker container run --name bt_api -d \
            -e RUST_BACKTRACE=1 \
            -e RUST_LOG=critical \
            -e ROCKET_ADDRESS=0.0.0.0 \
            -e ROCKET_PORT=8080 \
            -e DATABASE_URL=postgres://postgres:postgres@bt_db:5432/postgres \
            -e JWT_SECRET=3nEU6FVYvVi \
            --network bt_network \
            -p 8080:8080 \
            nvenard/bool_trainer_api:latest
      - name: Run front
        run: |
          sudo docker container run --name bt_front -d \
            -p 80:80 \
            nvenard/bool_trainer_front:latest